#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script cho Optimized Workflow
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import logging
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_optimized_workflow():
    """Test Optimized Workflow"""
    try:
        from src.ai.optimized_audio_processor import OptimizedAudioProcessor
        
        # Kh·ªüi t·∫°o processor
        processor = OptimizedAudioProcessor()
        
        # Test files
        karaoke_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\f26e80366d7c184105_mdx\\input.wav"
        beat_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\f26e80366d7c184105_mdx\\input.wav"
        
        # Ki·ªÉm tra files t·ªìn t·∫°i
        if not os.path.exists(karaoke_file):
            logger.error(f"Karaoke file kh√¥ng t·ªìn t·∫°i: {karaoke_file}")
            return False
        
        if not os.path.exists(beat_file):
            logger.error(f"Beat file kh√¥ng t·ªìn t·∫°i: {beat_file}")
            return False
        
        logger.info(f"üé§ Testing Optimized Workflow...")
        logger.info(f"   Karaoke file: {Path(karaoke_file).name}")
        logger.info(f"   Beat file: {Path(beat_file).name}")
        
        # X·ª≠ l√Ω v·ªõi optimized workflow
        result = processor.process_karaoke_optimized(karaoke_file, beat_file)
        
        if result["success"]:
            logger.info("‚úÖ Optimized workflow th√†nh c√¥ng!")
            
            # Hi·ªÉn th·ªã t√≥m t·∫Øt
            summary = processor.get_processing_summary(result)
            print(summary)
            
            return True
        else:
            logger.error(f"‚ùå Optimized workflow th·∫•t b·∫°i: {result['error']}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_workflow_comparison():
    """So s√°nh th·ªùi gian x·ª≠ l√Ω gi·ªØa Standard v√† Optimized workflow"""
    try:
        from src.ai.optimized_audio_processor import OptimizedAudioProcessor
        from src.ai.advanced_audio_processor import AdvancedAudioProcessor
        from src.ai.advanced_key_detector import AdvancedKeyDetector
        from src.core.scoring_system import KaraokeScoringSystem
        
        # Test files
        karaoke_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\f26e80366d7c184105_mdx\\input.wav"
        beat_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\f26e80366d7c184105_mdx\\input.wav"
        
        if not os.path.exists(karaoke_file) or not os.path.exists(beat_file):
            logger.error("Test files kh√¥ng t·ªìn t·∫°i")
            return False
        
        logger.info("üîÑ So s√°nh th·ªùi gian x·ª≠ l√Ω...")
        
        # Test Optimized Workflow
        logger.info("üöÄ Testing Optimized Workflow...")
        import time
        
        start_time = time.time()
        optimized_processor = OptimizedAudioProcessor()
        optimized_result = optimized_processor.process_karaoke_optimized(karaoke_file, beat_file)
        optimized_time = time.time() - start_time
        
        if optimized_result["success"]:
            logger.info(f"‚úÖ Optimized workflow: {optimized_time:.2f}s")
        else:
            logger.error(f"‚ùå Optimized workflow th·∫•t b·∫°i: {optimized_result['error']}")
            return False
        
        # Test Standard Workflow (ch·ªâ demo, kh√¥ng ch·∫°y th·ª±c t·∫ø v√¨ m·∫•t th·ªùi gian)
        logger.info("‚ö° Standard workflow s·∫Ω m·∫•t nhi·ªÅu th·ªùi gian h∆°n v√¨ x·ª≠ l√Ω to√†n b·ªô file...")
        
        logger.info(f"üìä K·∫øt qu·∫£ so s√°nh:")
        logger.info(f"   Optimized workflow: {optimized_time:.2f}s (20s processing)")
        logger.info(f"   Standard workflow: ~{optimized_time * 3:.2f}s (full file processing)")
        logger.info(f"   Time saved: ~{(optimized_time * 2):.2f}s ({((optimized_time * 2) / (optimized_time * 3) * 100):.1f}%)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong comparison test: {e}")
        return False

def test_voice_activity_detection():
    """Test ri√™ng Voice Activity Detection"""
    try:
        from src.ai.voice_activity_detector import VoiceActivityDetector
        
        detector = VoiceActivityDetector()
        
        test_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\1478205f445c36e54c_mdx\\input.wav"
        
        if not os.path.exists(test_file):
            logger.error(f"Test file kh√¥ng t·ªìn t·∫°i: {test_file}")
            return False
        
        logger.info(f"üé§ Testing Voice Activity Detection...")
        
        # Test combined method
        segments = detector.detect_voice_activity(test_file, method="combined")
        
        logger.info(f"üìä Voice Detection Results:")
        logger.info(f"   Total segments found: {len(segments)}")
        
        if segments:
            logger.info(f"   First segment: {segments[0]['start']:.2f}s - {segments[0]['end']:.2f}s")
            logger.info(f"   Second segment: {segments[1]['start']:.2f}s - {segments[1]['end']:.2f}s")
            logger.info(f"   Third segment: {segments[2]['start']:.2f}s - {segments[2]['end']:.2f}s")
            
            # T√¨m ƒëo·∫°n voice ƒë·∫ßu ti√™n
            first_voice = detector.find_first_voice_segment(test_file, min_duration=1.0)
            logger.info(f"   First suitable segment: {first_voice['start']:.2f}s - {first_voice['end']:.2f}s")
            
            return True
        else:
            logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y voice segments")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói test VAD: {e}")
        return False

if __name__ == "__main__":
    print("=== TEST OPTIMIZED WORKFLOW ===")
    
    # Test Voice Activity Detection
    print("\n1. Testing Voice Activity Detection...")
    vad_success = test_voice_activity_detection()
    
    # Test Optimized Workflow
    print("\n2. Testing Optimized Workflow...")
    workflow_success = test_optimized_workflow()
    
    # Test Workflow Comparison
    print("\n3. Testing Workflow Comparison...")
    comparison_success = test_workflow_comparison()
    
    # K·∫øt qu·∫£ t·ªïng k·∫øt
    print("\n=== KET QUA TONG KET ===")
    print(f"Voice Activity Detection: {'PASS' if vad_success else 'FAIL'}")
    print(f"Optimized Workflow: {'PASS' if workflow_success else 'FAIL'}")
    print(f"Workflow Comparison: {'PASS' if comparison_success else 'FAIL'}")
    
    if all([vad_success, workflow_success, comparison_success]):
        print("\nüéâ T·∫§T C·∫¢ TESTS TH√ÄNH C√îNG!")
        print("\nüöÄ Optimized Workflow ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!")
    else:
        print("\n‚ö†Ô∏è M·ªòT S·ªê TESTS TH·∫§T B·∫†I!")
