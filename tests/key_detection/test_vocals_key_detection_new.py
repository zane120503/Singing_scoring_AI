#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script ƒë·ªÉ ki·ªÉm tra key detection cho file vocals MP3 m·ªõi
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import logging
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_vocals_key_detection_new():
    """Test key detection cho file vocals m·ªõi"""
    logger.info("=== TEST VOCALS KEY DETECTION - FILE M·ªöI ===")
    
    try:
        # Import key detector
        from src.ai.advanced_key_detector import AdvancedKeyDetector
        
        # Kh·ªüi t·∫°o key detector
        key_detector = AdvancedKeyDetector()
        
        # ƒê∆∞·ªùng d·∫´n file vocals m·ªõi
        vocals_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\d01f4ec899c813f91b_mdx\\input_Vocals_DeReverb_converted.mp3"
        
        if not os.path.exists(vocals_file):
            logger.error(f"File vocals kh√¥ng t·ªìn t·∫°i: {vocals_file}")
            return False
        
        logger.info(f"Testing vocals file: {vocals_file}")
        
        # Test key detection
        logger.info("ƒêang th·ª±c hi·ªán key detection...")
        result = key_detector.detect_key(vocals_file, "vocals")
        
        if result:
            logger.info(f"‚úÖ K·∫øt qu·∫£ key detection:")
            logger.info(f"   Key: {result['key']} {result['scale']}")
            logger.info(f"   Confidence: {result['confidence']:.3f}")
            logger.info(f"   Method: {result['method']}")
            
            # Ph√¢n t√≠ch k·∫øt qu·∫£
            logger.info(f"\nüìä Ph√¢n t√≠ch k·∫øt qu·∫£:")
            logger.info(f"   Key ƒë∆∞·ª£c ph√°t hi·ªán: {result['key']} {result['scale']}")
            logger.info(f"   ƒê·ªô tin c·∫≠y: {result['confidence']:.1%}")
            logger.info(f"   Ph∆∞∆°ng ph√°p: {result['method']}")
            
            # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng
            if result['confidence'] > 0.8:
                logger.info("‚úÖ ƒê·ªô tin c·∫≠y CAO - Key detection c√≥ th·ªÉ ch√≠nh x√°c")
            elif result['confidence'] > 0.6:
                logger.info("‚ö†Ô∏è ƒê·ªô tin c·∫≠y TRUNG B√åNH - C·∫ßn xem x√©t th√™m")
            else:
                logger.info("‚ùå ƒê·ªô tin c·∫≠y TH·∫§P - Key detection c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c")
            
            return True
        else:
            logger.error("‚ùå Key detection th·∫•t b·∫°i")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_vocals_key_detection_new()
    if success:
        print("\nHoan thanh test key detection!")
    else:
        print("\nTest that bai!")
