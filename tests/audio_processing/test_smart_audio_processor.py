#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script cho Smart Audio Processor
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import logging
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_smart_audio_processor():
    """Test Smart Audio Processor"""
    try:
        from src.ai.smart_audio_processor import SmartAudioProcessor
        
        # Kh·ªüi t·∫°o processor
        processor = SmartAudioProcessor()
        
        # Test file (thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n ph√π h·ª£p)
        test_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\1478205f445c36e54c_mdx\\input_Vocals_DeReverb_converted.mp3"
        
        if not os.path.exists(test_file):
            logger.error(f"Test file kh√¥ng t·ªìn t·∫°i: {test_file}")
            return False
        
        logger.info(f"üé§ Testing Smart Audio Processor v·ªõi file: {test_file}")
        
        # B∆∞·ªõc 1: Ph√¢n t√≠ch voice activity
        logger.info("\n=== B∆Ø·ªöC 1: PH√ÇN T√çCH VOICE ACTIVITY ===")
        analysis = processor.get_voice_analysis(test_file)
        
        if "error" in analysis:
            logger.error(f"L·ªói ph√¢n t√≠ch: {analysis['error']}")
            return False
        
        logger.info(f"üìä K·∫øt qu·∫£ ph√¢n t√≠ch:")
        logger.info(f"   Total duration: {analysis['total_duration']:.2f}s")
        logger.info(f"   Voice duration: {analysis['voice_duration']:.2f}s")
        logger.info(f"   Voice ratio: {analysis['voice_ratio']:.1%}")
        logger.info(f"   Voice segments: {analysis['voice_count']}")
        
        # Hi·ªÉn th·ªã c√°c ƒëo·∫°n voice
        for i, segment in enumerate(analysis['voice_segments'][:5]):  # Ch·ªâ hi·ªÉn th·ªã 5 ƒëo·∫°n ƒë·∫ßu
            logger.info(f"   Segment {i+1}: {segment['start']:.2f}s - {segment['end']:.2f}s (conf: {segment['confidence']:.2f})")
        
        # B∆∞·ªõc 2: X·ª≠ l√Ω file ƒë·ªÉ t·∫°o voice sample
        logger.info("\n=== B∆Ø·ªöC 2: T·∫†O VOICE SAMPLE ===")
        output_dir = "D:\\singing scoring AI\\output\\voice_samples"
        
        result = processor.process_karaoke_file(test_file, output_dir, slice_duration=20.0)
        
        if result["success"]:
            logger.info(f"‚úÖ Th√†nh c√¥ng t·∫°o voice sample:")
            logger.info(f"   Output file: {result['output_file']}")
            logger.info(f"   Voice start: {result['selected_voice']['start']:.2f}s")
            logger.info(f"   Slice duration: {result['slice_duration']}s")
            
            return True
        else:
            logger.error(f"‚ùå Th·∫•t b·∫°i: {result['error']}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_voice_activity_detector():
    """Test ri√™ng Voice Activity Detector"""
    try:
        from src.ai.voice_activity_detector import VoiceActivityDetector
        
        detector = VoiceActivityDetector()
        
        test_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\1478205f445c36e54c_mdx\\input_Vocals_DeReverb_converted.mp3"
        
        if not os.path.exists(test_file):
            logger.error(f"Test file kh√¥ng t·ªìn t·∫°i: {test_file}")
            return False
        
        logger.info(f"üé§ Testing Voice Activity Detector...")
        
        # Test c√°c ph∆∞∆°ng ph√°p kh√°c nhau
        methods = ["spectral", "energy", "zero_crossing", "combined"]
        
        for method in methods:
            logger.info(f"\n--- Testing method: {method} ---")
            segments = detector.detect_voice_activity(test_file, method=method)
            logger.info(f"Ph√°t hi·ªán {len(segments)} voice segments")
            
            for i, segment in enumerate(segments[:3]):  # Ch·ªâ hi·ªÉn th·ªã 3 ƒëo·∫°n ƒë·∫ßu
                logger.info(f"  Segment {i+1}: {segment['start']:.2f}s - {segment['end']:.2f}s")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói test VAD: {e}")
        return False

def test_audio_slicer():
    """Test ri√™ng Audio Slicer"""
    try:
        from src.ai.audio_slicer import AudioSlicer
        
        slicer = AudioSlicer()
        
        test_file = "D:\\singing scoring AI\\Audio_separator_ui\\clean_song_output\\1478205f445c36e54c_mdx\\input_Vocals_DeReverb_converted.mp3"
        
        if not os.path.exists(test_file):
            logger.error(f"Test file kh√¥ng t·ªìn t·∫°i: {test_file}")
            return False
        
        logger.info(f"‚úÇÔ∏è Testing Audio Slicer...")
        
        # Test slice audio
        output_file = "D:\\singing scoring AI\\output\\test_slice.wav"
        success = slicer.slice_audio(test_file, output_file, start_time=10.0, duration=5.0)
        
        if success:
            logger.info(f"‚úÖ Th√†nh c√¥ng c·∫Øt audio: {output_file}")
            
            # Test preview
            preview_success = slicer.preview_voice_segment(output_file, 0, 5.0)
            if preview_success:
                logger.info("‚úÖ Preview th√†nh c√¥ng")
            
            return True
        else:
            logger.error("‚ùå Th·∫•t b·∫°i c·∫Øt audio")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói test Audio Slicer: {e}")
        return False

if __name__ == "__main__":
    print("=== TEST SMART AUDIO PROCESSOR ===")
    
    # Test c√°c components ri√™ng l·∫ª
    print("\n1. Testing Voice Activity Detector...")
    vad_success = test_voice_activity_detector()
    
    print("\n2. Testing Audio Slicer...")
    slicer_success = test_audio_slicer()
    
    # Test Smart Audio Processor
    print("\n3. Testing Smart Audio Processor...")
    processor_success = test_smart_audio_processor()
    
    # K·∫øt qu·∫£ t·ªïng k·∫øt
    print("\n=== K·∫æT QU·∫¢ T·ªîNG K·∫æT ===")
    print(f"Voice Activity Detector: {'‚úÖ PASS' if vad_success else '‚ùå FAIL'}")
    print(f"Audio Slicer: {'‚úÖ PASS' if slicer_success else '‚ùå FAIL'}")
    print(f"Smart Audio Processor: {'‚úÖ PASS' if processor_success else '‚ùå FAIL'}")
    
    if all([vad_success, slicer_success, processor_success]):
        print("\nüéâ T·∫§T C·∫¢ TESTS TH√ÄNH C√îNG!")
    else:
        print("\n‚ö†Ô∏è M·ªòT S·ªê TESTS TH·∫§T B·∫†I!")
