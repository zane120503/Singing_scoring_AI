#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Optimized Middle Workflow (20s Slice Processing)
- Input: karaoke_file, beat_file
- Steps:
  1) C·∫Øt file karaoke t·ª´ 15s ƒë·∫øn 35s (20s)
  2) T√°ch gi·ªçng tr√™n ƒëo·∫°n 20s ƒë√£ c·∫Øt b·∫±ng Audio Separator
  3) Xu·∫•t file vocals 20s ƒë√£ t√°ch
  4) Detect key (∆∞u ti√™n Docker Essentia) cho vocals 20s v√† beat
  5) So s√°nh key v√† t√≠nh ƒëi·ªÉm
"""

import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import logging
import librosa
import soundfile as sf
import concurrent.futures
import threading

from typing import Dict
import shutil

from src.ai.advanced_audio_processor import AdvancedAudioProcessor
from src.ai.advanced_key_detector import AdvancedKeyDetector

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def run_workflow(karaoke_file: str, beat_file: str, duration: float = 30.0, output_dir: str = None) -> Dict:
    """Ch·∫°y workflow c·∫Øt 30s (15-45s), t√°ch gi·ªçng, detect key, so s√°nh & ch·∫•m ƒëi·ªÉm."""
    # 0) Chu·∫©n b·ªã th∆∞ m·ª•c xu·∫•t
    if output_dir is None:
        output_dir = os.path.join(os.path.dirname(__file__), 'Audio_separator_ui', 'clean_song_output')
    os.makedirs(output_dir, exist_ok=True)

    base_stem = os.path.splitext(os.path.basename(karaoke_file))[0]

    # 1) C·∫Øt audio th√¥ng minh d·ª±a tr√™n ƒë·ªô d√†i file
    try:
        audio, sr = librosa.load(karaoke_file, sr=None, mono=True)
        total_duration = len(audio) / sr
        
        logger.info(f"üìä File duration: {total_duration:.2f}s")
        
        # Logic c·∫Øt th√¥ng minh
        if total_duration <= duration:
            # File ng·∫Øn: s·ª≠ d·ª•ng to√†n b·ªô file
            logger.info(f"üìÅ File ng·∫Øn ({total_duration:.2f}s ‚â§ {duration}s), s·ª≠ d·ª•ng to√†n b·ªô file")
            start_t = 0.0
            end_t = total_duration
            slice_audio = audio
        elif total_duration <= 60.0:
            # File trung b√¨nh: c·∫Øt t·ª´ gi·ªØa
            logger.info(f"üìÅ File trung b√¨nh ({total_duration:.2f}s), c·∫Øt t·ª´ gi·ªØa")
            start_t = max(0, (total_duration - duration) / 2)
            end_t = start_t + duration
            start_sample = int(start_t * sr)
            end_sample = int(end_t * sr)
            slice_audio = audio[start_sample:end_sample]
        else:
            # File d√†i: c·∫Øt t·ª´ 15s nh∆∞ c≈©
            logger.info(f"üìÅ File d√†i ({total_duration:.2f}s), c·∫Øt t·ª´ 15s")
            start_t = 15.0
            end_t = start_t + duration
            start_sample = int(start_t * sr)
            end_sample = int(end_t * sr)
            slice_audio = audio[start_sample:end_sample]
        
        # L∆∞u file ƒë√£ c·∫Øt
        actual_duration = len(slice_audio) / sr
        sliced_path = os.path.join(output_dir, f"{base_stem}_slice_{int(start_t)}s_{int(start_t + actual_duration)}s.wav")
        sf.write(sliced_path, slice_audio, sr)
        
        logger.info(f"‚úÖ ƒê√£ c·∫Øt audio: {actual_duration:.2f}s t·ª´ {start_t:.1f}s")
        
    except Exception as e:
        return {"success": False, "error": f"L·ªói c·∫Øt audio: {e}"}

    # 2) Kh·ªüi t·∫°o Key Detector v√† b·∫Øt ƒë·∫ßu Beat Key Detection ngay l·∫≠p t·ª©c
    logger.info("üéº Kh·ªüi t·∫°o Key Detector v√† b·∫Øt ƒë·∫ßu Beat Key Detection...")
    keydet = AdvancedKeyDetector()
    
    # Log GPU status
    if keydet.use_gpu:
        logger.info(f"üöÄ GPU acceleration ENABLED on device: {keydet.device}")
    else:
        logger.info("üíª GPU acceleration DISABLED, using CPU")
    
    def detect_beat_key():
        """Detect key cho beat v·ªõi focus v√†o accuracy"""
        try:
            logger.info(f"üéµ ƒêang ph√°t hi·ªán key cho beat...")
            # S·ª≠ d·ª•ng audio_type='beat' ƒë·ªÉ trigger beat-specific analysis
            result = keydet.detect_key(beat_file, audio_type='beat')
            if result and 'key' in result:
                logger.info(f"‚úÖ Beat key detected: {result['key']}")
                return result
            else:
                # Fallback: th·ª≠ v·ªõi instrumental
                logger.info("üîÑ Fallback: th·ª≠ v·ªõi audio_type='instrumental'...")
                result = keydet.detect_key(beat_file, audio_type='instrumental')
                if result and 'key' in result:
                    logger.info(f"‚úÖ Beat key detected (fallback): {result['key']}")
                    return result
                else:
                    # Final fallback: vocals method
                    logger.info("üîÑ Final fallback: th·ª≠ v·ªõi audio_type='vocals'...")
                    result = keydet.detect_key(beat_file, audio_type='vocals')
                    if result and 'key' in result:
                        logger.info(f"‚úÖ Beat key detected (final fallback): {result['key']}")
                        return result
        except Exception as e:
            logger.warning(f"Beat key detection failed: {e}")
        return None
    
    def separate_vocals():
        """T√°ch gi·ªçng t·ª´ ƒëo·∫°n audio ƒë√£ c·∫Øt"""
        try:
            logger.info("üé§ B·∫Øt ƒë·∫ßu t√°ch gi·ªçng h√°t...")
            audio_proc = AdvancedAudioProcessor(fast_mode=False)
            vocals_path = audio_proc.separate_vocals(sliced_path)
            if not vocals_path or not os.path.exists(vocals_path):
                return None, None
            
            # Xu·∫•t/copy vocals ƒë√£ t√°ch ra output_dir
            vocals_ext = os.path.splitext(vocals_path)[1]
            vocals_export = os.path.join(output_dir, f"{base_stem}_slice_vocals{vocals_ext}")
            try:
                shutil.copy2(vocals_path, vocals_export)
            except Exception:
                # fallback: n·∫øu copy fail v·∫´n d√πng vocals_path g·ªëc
                vocals_export = vocals_path
            
            logger.info("‚úÖ T√°ch gi·ªçng ho√†n th√†nh!")
            return vocals_path, vocals_export
        except Exception as e:
            logger.warning(f"Vocal separation failed: {e}")
            return None, None
    
    def detect_vocals_key(vocals_export):
        """Detect key cho vocals"""
        try:
            logger.info("üé§ ƒêang ph√°t hi·ªán key cho vocals...")
            result = keydet.detect_key(vocals_export, audio_type='vocals')
            logger.info(f"‚úÖ Vocals key detected: {result.get('key', 'Unknown')}")
            return result
        except Exception as e:
            logger.warning(f"Vocals key detection failed: {e}")
            return None
    
    # 3) Ch·∫°y Beat Key Detection v√† Vocal Separation SONG SONG
    logger.info("‚ö° Ch·∫°y Beat Key Detection v√† Vocal Separation song song...")
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
        # Submit beat key detection ngay l·∫≠p t·ª©c
        beat_future = executor.submit(detect_beat_key)
        # Submit vocal separation song song
        vocals_sep_future = executor.submit(separate_vocals)
        
        # Ch·ªù beat key detection ho√†n th√†nh tr∆∞·ªõc
        beat_key = beat_future.result()
        logger.info("üéâ Beat key detection ho√†n th√†nh!")
        
        # Ch·ªù vocal separation ho√†n th√†nh
        vocals_path, vocals_export = vocals_sep_future.result()
        if not vocals_export:
            return {"success": False, "error": "T√°ch gi·ªçng th·∫•t b·∫°i"}
        
        # Detect vocals key sau khi separation ho√†n th√†nh
        vocals_key = detect_vocals_key(vocals_export)
    
    logger.info("üéâ Ho√†n th√†nh t·∫•t c·∫£ key detection!")
    if not (vocals_key and 'key' in vocals_key and beat_key and 'key' in beat_key):
        return {"success": False, "error": "Ph√°t hi·ªán key th·∫•t b·∫°i"}

    # 4) So s√°nh key v√† t√≠nh ƒëi·ªÉm ƒë∆°n gi·∫£n
    v_key = vocals_key['key']
    b_key = beat_key['key']
    if v_key == b_key:
        similarity = 1.0
        score = 100.0
        match = True
    else:
        similarity = 0.5
        score = 50.0
        match = False

    return {
        "success": True,
        "inputs": {"karaoke_file": karaoke_file, "beat_file": beat_file},
        "sliced_karaoke": sliced_path,
        "vocals_src": vocals_path,
        "vocals_export": vocals_export,
        "vocals_key": vocals_key,
        "beat_key": beat_key,
        "key_compare": {"match": match, "similarity": similarity, "score": score}
    }


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Optimized middle workflow: slice 20s, separate vocals, detect keys, compare & score")
    parser.add_argument("karaoke", help="ƒê∆∞·ªùng d·∫´n file ghi √¢m karaoke")
    parser.add_argument("beat", help="ƒê∆∞·ªùng d·∫´n file beat nh·∫°c")
    parser.add_argument("--output", "-o", help="Th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh: Audio_separator_ui/clean_song_output)")
    parser.add_argument("--duration", "-d", type=float, default=20.0, help="Th·ªùi l∆∞·ª£ng c·∫Øt (m·∫∑c ƒë·ªãnh 20s)")
    args = parser.parse_args()

    result = run_workflow(args.karaoke, args.beat, duration=args.duration, output_dir=args.output)
    if not isinstance(result, dict) or not result.get("success"):
        print("‚ùå L·ªói:", result.get("error") if isinstance(result, dict) else "Kh√¥ng r√µ")
        raise SystemExit(1)

    print("‚úÖ Ho√†n t·∫•t!")
    print("- Karaoke slice:", result["sliced_karaoke"]) 
    print("- Vocals 20s:", result["vocals_export"]) 
    print("- Vocals key:", result["vocals_key"]) 
    print("- Beat key:", result["beat_key"]) 
    print("- So s√°nh key:", result["key_compare"]) 


