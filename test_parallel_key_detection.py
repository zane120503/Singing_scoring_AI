#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Parallel Key Detection - Ki·ªÉm tra song song ho·∫°t ƒë·ªông
"""

import sys
import os
import time
import logging
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.ai.advanced_key_detector import AdvancedKeyDetector

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_parallel_key_detection():
    """Test song song key detection v·ªõi 2 file audio"""
    
    # ƒê∆∞·ªùng d·∫´n test files (c·∫ßn c·∫≠p nh·∫≠t theo h·ªá th·ªëng c·ªßa b·∫°n)
    vocals_file = "D:\\singing scoring AI\\assets\\audio\\test_stereo.wav"
    beat_file = "D:\\singing scoring AI\\assets\\audio\\test.mp3"
    
    # Ki·ªÉm tra files t·ªìn t·∫°i
    if not os.path.exists(vocals_file):
        logger.warning(f"Vocals file kh√¥ng t·ªìn t·∫°i: {vocals_file}")
        vocals_file = None
    if not os.path.exists(beat_file):
        logger.warning(f"Beat file kh√¥ng t·ªìn t·∫°i: {beat_file}")
        beat_file = None
    
    if not vocals_file or not beat_file:
        logger.error("‚ùå Kh√¥ng c√≥ file test ƒë·ªÉ ch·∫°y song song")
        return False
    
    logger.info("üß™ B·∫Øt ƒë·∫ßu test song song key detection...")
    logger.info(f"Vocals file: {vocals_file}")
    logger.info(f"Beat file: {beat_file}")
    
    key_detector = AdvancedKeyDetector()
    
    # Test 1: Sequential (tu·∫ßn t·ª±) - ƒë·ªÉ so s√°nh th·ªùi gian
    logger.info("\nüìä Test 1: Sequential Key Detection")
    start_time = time.time()
    
    try:
        vocals_key_seq = key_detector.detect_key(vocals_file, audio_type='vocals')
        beat_key_seq = key_detector.detect_key(beat_file, audio_type='beat')
        sequential_time = time.time() - start_time
        
        logger.info(f"‚úÖ Sequential completed in {sequential_time:.2f}s")
        logger.info(f"   Vocals key: {vocals_key_seq.get('key', 'Unknown')}")
        logger.info(f"   Beat key: {beat_key_seq.get('key', 'Unknown')}")
    except Exception as e:
        logger.error(f"‚ùå Sequential test failed: {e}")
        return False
    
    # Test 2: Parallel (song song)
    logger.info("\n‚ö° Test 2: Parallel Key Detection")
    start_time = time.time()
    
    import concurrent.futures
    
    def detect_vocals():
        try:
            logger.info("üé§ Detecting vocals key...")
            result = key_detector.detect_key(vocals_file, audio_type='vocals')
            logger.info(f"‚úÖ Vocals key: {result.get('key', 'Unknown')}")
            return result
        except Exception as e:
            logger.error(f"Vocals detection failed: {e}")
            return None
    
    def detect_beat():
        try:
            logger.info("üéµ Detecting beat key...")
            result = key_detector.detect_key(beat_file, audio_type='beat')
            logger.info(f"‚úÖ Beat key: {result.get('key', 'Unknown')}")
            return result
        except Exception as e:
            logger.error(f"Beat detection failed: {e}")
            return None
    
    # Ch·∫°y song song
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
        vocals_future = executor.submit(detect_vocals)
        beat_future = executor.submit(detect_beat)
        
        vocals_key_par = vocals_future.result()
        beat_key_par = beat_future.result()
    
    parallel_time = time.time() - start_time
    
    logger.info(f"‚úÖ Parallel completed in {parallel_time:.2f}s")
    
    # So s√°nh k·∫øt qu·∫£
    logger.info("\nüìà K·∫øt qu·∫£ so s√°nh:")
    logger.info(f"   Sequential time: {sequential_time:.2f}s")
    logger.info(f"   Parallel time: {parallel_time:.2f}s")
    
    if parallel_time < sequential_time:
        speedup = sequential_time / parallel_time
        logger.info(f"   üöÄ Speedup: {speedup:.2f}x faster!")
    else:
        logger.info("   ‚ö†Ô∏è Parallel kh√¥ng nhanh h∆°n (c√≥ th·ªÉ do overhead)")
    
    # Ki·ªÉm tra k·∫øt qu·∫£ c√≥ gi·ªëng nhau kh√¥ng
    vocals_match = vocals_key_seq.get('key') == vocals_key_par.get('key')
    beat_match = beat_key_seq.get('key') == beat_key_par.get('key')
    
    logger.info(f"   Vocals key match: {vocals_match}")
    logger.info(f"   Beat key match: {beat_match}")
    
    if vocals_match and beat_match:
        logger.info("‚úÖ Song song ho·∫°t ƒë·ªông ch√≠nh x√°c!")
        return True
    else:
        logger.warning("‚ö†Ô∏è K·∫øt qu·∫£ song song kh√°c v·ªõi tu·∫ßn t·ª±")
        return False

if __name__ == "__main__":
    print("=== TEST PARALLEL KEY DETECTION ===")
    success = test_parallel_key_detection()
    
    if success:
        print("\nüéâ Test th√†nh c√¥ng! Song song ho·∫°t ƒë·ªông t·ªët.")
    else:
        print("\n‚ùå Test th·∫•t b·∫°i ho·∫∑c c·∫ßn c·∫£i thi·ªán.")
