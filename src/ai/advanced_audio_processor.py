import os
import sys
import json
import librosa
import numpy as np
import soundfile as sf
import torch
import onnxruntime as ort
from typing import Tuple, Optional, Union
import warnings
import logging
warnings.filterwarnings("ignore")

# Import Audio Separator Integration
from src.ai.audio_separator_integration import AudioSeparatorIntegration

logger = logging.getLogger(__name__)

class AdvancedAudioProcessor:
    """X·ª≠ l√Ω √¢m thanh n√¢ng cao s·ª≠ d·ª•ng Audio Separator UI"""
    
    def __init__(self, fast_mode=False):
        # Force GPU usage
        from src.core.gpu_config import get_device, force_cuda
        force_cuda()
        self.device = get_device()
        self.output_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'data', 'temp_output')
        self.fast_mode = fast_mode
        
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Kh·ªüi t·∫°o Audio Separator Integration
        if not fast_mode:
            self.audio_separator = AudioSeparatorIntegration(fast_mode=fast_mode)
            self.model = "Audio_Separator_AI" if self.audio_separator.available else None
        else:
            self.audio_separator = None
            self.model = "Fast_Mode"
        
        logger.info(f"‚úÖ AdvancedAudioProcessor initialized {'with Fast Mode' if fast_mode else 'with Audio Separator Integration'}")
    
    def _initialize_models(self):
        """Kh·ªüi t·∫°o c√°c models t·ª´ Audio Separator"""
        try:
            if os.path.exists(os.path.join(self.mdxnet_models_dir, "data.json")):
                with open(os.path.join(self.mdxnet_models_dir, "data.json")) as infile:
                    self.mdx_model_params = json.load(infile)
                print("Loaded model configuration from Audio Separator")
                self.model = "Audio_Separator_UI"  # Set model ƒë·ªÉ GUI nh·∫≠n di·ªán
            else:
                print("Model configuration not found, using fallback")
                self.mdx_model_params = None
                self.model = None
        except Exception as e:
            print(f"Error initializing models: {e}")
            self.mdx_model_params = None
            self.model = None
    
    def load_audio(self, file_path: str, sample_rate: int = 44100) -> Tuple[np.ndarray, int]:
        """T·∫£i file √¢m thanh"""
        try:
            audio, sr = librosa.load(file_path, sr=sample_rate)
            return audio, sr
        except Exception as e:
            raise Exception(f"L·ªói khi t·∫£i file √¢m thanh: {e}")
    
    def convert_to_stereo_and_wav(self, input_path: str) -> str:
        """Chuy·ªÉn ƒë·ªïi file √¢m thanh th√†nh stereo WAV"""
        try:
            # T·∫£i √¢m thanh
            audio, sr = librosa.load(input_path, sr=44100, mono=False)
            
            # ƒê·∫£m b·∫£o l√† stereo
            if len(audio.shape) == 1:
                audio = np.stack([audio, audio])
            elif audio.shape[0] == 1:
                audio = np.repeat(audio, 2, axis=0)
            
            # T·∫°o file output
            output_path = input_path.replace('.mp3', '_converted.wav').replace('.m4a', '_converted.wav')
            if not output_path.endswith('.wav'):
                output_path += '.wav'
            
            # L∆∞u file
            sf.write(output_path, audio.T, sr)
            return output_path
            
        except Exception as e:
            print(f"L·ªói khi chuy·ªÉn ƒë·ªïi file: {e}")
            return input_path
    
    def separate_vocals_advanced(self, audio_path: str, output_path: Union[str, None] = None) -> str:
        """T√°ch gi·ªçng h√°t s·ª≠ d·ª•ng Audio Separator UI"""
        try:
            print("Separating vocals with Audio Separator...")
            
            # Chuy·ªÉn ƒë·ªïi file th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p
            converted_path = self.convert_to_stereo_and_wav(audio_path)
            
            # T·∫°o hash cho file
            import hashlib
            with open(converted_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            
            # T·∫°o th∆∞ m·ª•c output
            song_output_dir = os.path.join(self.output_dir, f"{file_hash}_mdx")
            os.makedirs(song_output_dir, exist_ok=True)
            
            # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n h√≥a t·ª´ Audio Separator
            vocals_path = self._extract_vocals_simple(converted_path, song_output_dir)
            
            # N·∫øu c√≥ output_path ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, copy file
            if output_path and vocals_path:
                import shutil
                shutil.copy2(vocals_path, output_path)
                return output_path
            
            return vocals_path
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√°ch gi·ªçng v·ªõi Audio Separator: {e}")
            # Fallback v·ªÅ ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
            return self._separate_vocals_fallback(audio_path, output_path)
    
    def _extract_vocals_simple(self, audio_path: str, output_dir: str) -> str:
        """S·ª≠ d·ª•ng AI model th·ª±c s·ª± ƒë·ªÉ t√°ch gi·ªçng"""
        try:
            # Import AI Audio Separator wrapper
            from ai_audio_separator import AIAudioSeparator
            
            print("Using AI Audio Separator model...")
            
            # S·ª≠ d·ª•ng AI model ƒë·ªÉ t√°ch gi·ªçng
            vocals_path = os.path.join(output_dir, "vocals.wav")
            
            # T·∫°o separator instance
            separator = AIAudioSeparator()
            
            # G·ªçi AI model
            result_path = separator.separate_vocals(audio_path, vocals_path)
            
            if result_path and os.path.exists(result_path):
                print(f"AI Vocals separated and saved at: {result_path}")
                return result_path
            else:
                print("AI model failed, using fallback...")
                return self._extract_vocals_fallback(audio_path, output_dir)
                
        except ImportError as e:
            print(f"AI model not available: {e}")
            return self._extract_vocals_fallback(audio_path, output_dir)
        except Exception as e:
            print(f"Error in AI vocal extraction: {e}")
            return self._extract_vocals_fallback(audio_path, output_dir)
    
    def _extract_vocals_fallback(self, audio_path: str, output_dir: str) -> str:
        """Ph∆∞∆°ng ph√°p t√°ch gi·ªçng fallback"""
        try:
            # T·∫£i √¢m thanh
            audio, sr = librosa.load(audio_path, sr=44100)
            
            # S·ª≠ d·ª•ng harmonic-percussive separation
            harmonic, percussive = librosa.effects.hpss(audio)
            
            # Harmonic component th∆∞·ªùng ch·ª©a gi·ªçng h√°t
            vocals = harmonic
            
            # Normalize
            vocals = librosa.util.normalize(vocals)
            
            # L∆∞u file vocals
            vocals_path = os.path.join(output_dir, "vocals.wav")
            sf.write(vocals_path, vocals, sr)
            
            print(f"Fallback vocals separated and saved at: {vocals_path}")
            return vocals_path
            
        except Exception as e:
            print(f"Error in fallback vocal extraction: {e}")
            return None
    
    def _separate_vocals_fallback(self, audio_path: str, output_path: Union[str, None] = None) -> str:
        """Ph∆∞∆°ng ph√°p fallback ƒë·ªÉ t√°ch gi·ªçng"""
        try:
            # T·∫£i √¢m thanh
            audio, sr = self.load_audio(audio_path)
            
            # S·ª≠ d·ª•ng harmonic-percussive separation
            harmonic, percussive = librosa.effects.hpss(audio)
            
            # Harmonic component th∆∞·ªùng ch·ª©a gi·ªçng h√°t
            vocals = harmonic
            
            # Normalize audio
            vocals = librosa.util.normalize(vocals)
            
            # L∆∞u file gi·ªçng ƒë√£ t√°ch
            if output_path is None:
                output_path = audio_path.replace('.wav', '_vocals.wav').replace('.mp3', '_vocals.wav')
            
            sf.write(output_path, vocals, sr)
            print(f"Vocals separated (fallback) and saved at: {output_path}")
            return output_path
            
        except Exception as e:
            raise Exception(f"Error in fallback vocal separation: {e}")
    
    def separate_vocals(self, audio_path: str, output_path: Union[str, None] = None) -> str:
        """T√°ch gi·ªçng h√°t - Fast Mode ho·∫∑c AI Mode"""
        try:
            if self.fast_mode:
                logger.info("üöÄ S·ª≠ d·ª•ng Fast Mode ƒë·ªÉ t√°ch gi·ªçng h√°t...")
                return self._separate_vocals_fast(audio_path, output_path)
            else:
                logger.info("üé§ B·∫Øt ƒë·∫ßu t√°ch gi·ªçng h√°t b·∫±ng AI Audio Separator...")
                
                # Ki·ªÉm tra Audio Separator c√≥ kh·∫£ d·ª•ng kh√¥ng
                if not self.audio_separator.available:
                    logger.warning("‚ö†Ô∏è Audio Separator kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng fallback method")
                    return self._separate_vocals_fallback(audio_path, output_path)
                
                # S·ª≠ d·ª•ng AI Audio Separator
                logger.info("‚úÖ S·ª≠ d·ª•ng AI Audio Separator model...")
                vocals_path = self.audio_separator.separate_vocals_ai(audio_path, "mp3")
                
                # N·∫øu c√≥ output_path ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, copy file
                if output_path and vocals_path != output_path:
                    import shutil
                    shutil.copy2(vocals_path, output_path)
                    vocals_path = output_path
                
                logger.info(f"‚úÖ AI Vocals separated and saved at: {vocals_path}")
                return vocals_path
                
        except Exception as e:
            logger.error(f"‚ùå Error in AI vocal separation: {e}")
            logger.info("üîÑ Chuy·ªÉn sang fallback method...")
            return self._separate_vocals_fallback(audio_path, output_path)
    
    def _separate_vocals_fast(self, audio_path: str, output_path: Union[str, None] = None) -> str:
        """Fast Mode - T√°ch gi·ªçng nhanh v·ªõi ch·∫•t l∆∞·ª£ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c"""
        try:
            logger.info("‚ö° Fast Mode: T√°ch gi·ªçng v·ªõi t·ªëc ƒë·ªô cao...")
            
            # Load audio v·ªõi sample rate th·∫•p h∆°n ƒë·ªÉ tƒÉng t·ªëc
            audio, sr = librosa.load(audio_path, sr=16000, mono=False)  # Gi·∫£m t·ª´ 22050 xu·ªëng 16000
            
            # Chuy·ªÉn ƒë·ªïi sang mono n·∫øu c·∫ßn
            if len(audio.shape) > 1:
                audio = librosa.to_mono(audio)
            
            # S·ª≠ d·ª•ng HPSS v·ªõi tham s·ªë t·ªëi ∆∞u cho t·ªëc ƒë·ªô
            harmonic, percussive = librosa.effects.hpss(audio, margin=(1, 1))  # Gi·∫£m margin ƒë·ªÉ tƒÉng t·ªëc
            
            # K·∫øt h·ª£p harmonic v√† m·ªôt ph·∫ßn percussive ƒë·ªÉ gi·ªØ vocals
            vocals_audio = harmonic + 0.3 * percussive  # Th√™m m·ªôt ch√∫t percussive ƒë·ªÉ gi·ªØ vocals
            
            # T·∫°o output path
            if output_path is None:
                base_name = os.path.splitext(os.path.basename(audio_path))[0]
                output_path = os.path.join(self.output_dir, f"{base_name}_vocals_fast.wav")
            
            # Save vocals v·ªõi sample rate th·∫•p h∆°n
            sf.write(output_path, vocals_audio, sr)
            
            # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n l√† absolute path
            output_path = os.path.abspath(output_path)
            
            logger.info(f"‚ö° Fast vocals saved at: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"‚ùå Error in fast vocal separation: {e}")
            return self._separate_vocals_fallback(audio_path, output_path)
    
    def _separate_vocals_fallback(self, audio_path: str, output_path: Union[str, None] = None) -> str:
        """Fallback method s·ª≠ d·ª•ng librosa"""
        try:
            logger.info("üîÑ S·ª≠ d·ª•ng fallback method (librosa)...")
            
            # Load audio
            audio, sr = librosa.load(audio_path, sr=22050, mono=False)
            
            # Chuy·ªÉn ƒë·ªïi sang mono n·∫øu c·∫ßn
            if len(audio.shape) > 1:
                audio = librosa.to_mono(audio)
            
            # Harmonic-percussive separation
            harmonic, percussive = librosa.effects.hpss(audio)
            
            # S·ª≠ d·ª•ng harmonic component l√†m vocals
            vocals_audio = harmonic
            
            # T·∫°o output path
            if output_path is None:
                base_name = os.path.splitext(os.path.basename(audio_path))[0]
                output_path = os.path.join(self.output_dir, f"{base_name}_vocals_fallback.wav")
            
            # Save vocals
            sf.write(output_path, vocals_audio, sr)
            
            # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n l√† absolute path
            output_path = os.path.abspath(output_path)
            
            logger.info(f"‚úÖ Fallback vocals saved at: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"‚ùå Error in fallback vocal separation: {e}")
            raise
    
    def get_audio_features(self, audio_path: str) -> dict:
        """Tr√≠ch xu·∫•t c√°c ƒë·∫∑c tr∆∞ng √¢m thanh"""
        try:
            audio, sr = self.load_audio(audio_path)
            
            # T√≠nh to√°n c√°c ƒë·∫∑c tr∆∞ng
            features = {
                'duration': len(audio) / sr,
                'sample_rate': sr,
                'rms_energy': np.sqrt(np.mean(audio**2)),
                'zero_crossing_rate': np.mean(librosa.feature.zero_crossing_rate(audio)[0]),
                'spectral_centroid': np.mean(librosa.feature.spectral_centroid(y=audio, sr=sr)[0]),
                'spectral_rolloff': np.mean(librosa.feature.spectral_rolloff(y=audio, sr=sr)[0]),
                'mfcc': np.mean(librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13), axis=1)
            }
            
            return features
        except Exception as e:
            raise Exception(f"L·ªói khi tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng: {e}")
    
    def normalize_audio(self, audio: np.ndarray) -> np.ndarray:
        """Chu·∫©n h√≥a √¢m thanh"""
        return librosa.util.normalize(audio)
    
    def trim_silence(self, audio: np.ndarray, sr: int, top_db: int = 20) -> np.ndarray:
        """Lo·∫°i b·ªè kho·∫£ng l·∫∑ng"""
        trimmed, _ = librosa.effects.trim(audio, top_db=top_db)
        return trimmed
    
    def cleanup_temp_files(self):
        """D·ªçn d·∫πp c√°c file t·∫°m"""
        try:
            if os.path.exists(self.output_dir):
                import shutil
                shutil.rmtree(self.output_dir)
                os.makedirs(self.output_dir, exist_ok=True)
                print("Temporary files cleaned up")
        except Exception as e:
            print(f"Error during cleanup: {e}")
