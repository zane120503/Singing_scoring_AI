#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ s·ª≠a l·ªói file lock trong audio processing
"""

import os
import sys
import time
import shutil
from pathlib import Path

def check_and_clean_temp_files():
    """Ki·ªÉm tra v√† d·ªçn d·∫πp c√°c file temp"""
    base_path = Path(__file__).parent.parent
    
    # C√°c th∆∞ m·ª•c c·∫ßn ki·ªÉm tra
    temp_dirs = [
        base_path / "Audio_separator_ui" / "clean_song_output",
        base_path / "output" / "clean_song_output",
        base_path / "data" / "temp_output"
    ]
    
    print("Kiem tra va don dep cac file temp...")
    
    for temp_dir in temp_dirs:
        if temp_dir.exists():
            print(f"\nKi·ªÉm tra th∆∞ m·ª•c: {temp_dir}")
            
            # Li·ªát k√™ t·∫•t c·∫£ file trong th∆∞ m·ª•c
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    file_path = Path(root) / file
                    try:
                        # Th·ª≠ m·ªü file ƒë·ªÉ ki·ªÉm tra lock
                        with open(file_path, 'rb') as f:
                            f.read(1)
                        print(f"  ‚úÖ {file_path.name} - OK")
                    except Exception as e:
                        print(f"  ‚ùå {file_path.name} - L·ªói: {e}")
                        
                        # Th·ª≠ x√≥a file b·ªã lock
                        try:
                            file_path.unlink()
                            print(f"  üóëÔ∏è ƒê√£ x√≥a file b·ªã lock: {file_path.name}")
                        except Exception as e2:
                            print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a: {e2}")
        else:
            print(f"\nTh∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {temp_dir}")

def create_fresh_output_dirs():
    """T·∫°o l·∫°i c√°c th∆∞ m·ª•c output"""
    base_path = Path(__file__).parent.parent
    
    output_dirs = [
        base_path / "output" / "clean_song_output",
        base_path / "data" / "temp_output"
    ]
    
    print("\nT·∫°o l·∫°i c√°c th∆∞ m·ª•c output...")
    
    for output_dir in output_dirs:
        try:
            if output_dir.exists():
                shutil.rmtree(output_dir)
                print(f"üóëÔ∏è ƒê√£ x√≥a th∆∞ m·ª•c c≈©: {output_dir}")
            
            output_dir.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: {output_dir}")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c {output_dir}: {e}")

def check_audio_separator_paths():
    """Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n Audio Separator"""
    base_path = Path(__file__).parent.parent
    
    print("\nKi·ªÉm tra ƒë∆∞·ªùng d·∫´n Audio Separator...")
    
    # Ki·ªÉm tra Audio_separator_ui
    audio_sep_path = base_path / "Audio_separator_ui"
    if audio_sep_path.exists():
        print(f"‚úÖ Audio_separator_ui t·ªìn t·∫°i: {audio_sep_path}")
        
        # Ki·ªÉm tra models
        models_path = audio_sep_path / "mdx_models"
        if models_path.exists():
            print(f"‚úÖ Models t·ªìn t·∫°i: {models_path}")
        else:
            print(f"‚ùå Models kh√¥ng t·ªìn t·∫°i: {models_path}")
    else:
        print(f"‚ùå Audio_separator_ui kh√¥ng t·ªìn t·∫°i: {audio_sep_path}")
    
    # Ki·ªÉm tra assets/models
    assets_models_path = base_path / "assets" / "models" / "mdx_models"
    if assets_models_path.exists():
        print(f"‚úÖ Assets models t·ªìn t·∫°i: {assets_models_path}")
    else:
        print(f"‚ùå Assets models kh√¥ng t·ªìn t·∫°i: {assets_models_path}")

def main():
    """H√†m ch√≠nh"""
    print("=== SUA LOI FILE LOCK TRONG AUDIO PROCESSING ===")
    
    # Ki·ªÉm tra v√† d·ªçn d·∫πp file temp
    check_and_clean_temp_files()
    
    # T·∫°o l·∫°i th∆∞ m·ª•c output
    create_fresh_output_dirs()
    
    # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n
    check_audio_separator_paths()
    
    print("\n‚úÖ Ho√†n th√†nh s·ª≠a l·ªói file lock!")

if __name__ == "__main__":
    main()
