#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Process Full Audio - X·ª≠ l√Ω tr·ª±c ti·∫øp 2 file ƒë·∫ßu v√†o (kh√¥ng c·∫Øt)
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import logging
import librosa
import numpy as np
import concurrent.futures
import threading

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def process_full_audio(karaoke_file: str, beat_file: str):
    """X·ª≠ l√Ω tr·ª±c ti·∫øp 2 file ƒë·∫ßu v√†o: t√°ch gi·ªçng, ph√°t hi·ªán key, so s√°nh, ch·∫•m ƒëi·ªÉm"""
    try:
        from src.ai.advanced_audio_processor import AdvancedAudioProcessor
        from src.ai.advanced_key_detector import AdvancedKeyDetector
        from src.core.scoring_system import KaraokeScoringSystem
        
        if not os.path.exists(karaoke_file):
            logger.error(f"Karaoke file kh√¥ng t·ªìn t·∫°i: {karaoke_file}")
            return False
        if not os.path.exists(beat_file):
            logger.error(f"Beat file kh√¥ng t·ªìn t·∫°i: {beat_file}")
            return False
        
        logger.info("üéµ Processing Full Audio Files...")
        logger.info(f"Karaoke: {karaoke_file}")
        logger.info(f"Beat: {beat_file}")
        
        # B∆∞·ªõc 1: T√°ch gi·ªçng v·ªõi Audio Separator
        logger.info("\nüîß B∆∞·ªõc 1: T√°ch gi·ªçng v·ªõi Audio Separator...")
        
        # Kh·ªüi t·∫°o Audio Processor
        audio_processor = AdvancedAudioProcessor(fast_mode=False)
        
        # T·∫°o output directory
        output_dir = "D:\\singing scoring AI\\output\\full_audio_processing"
        os.makedirs(output_dir, exist_ok=True)
        
        # T√°ch gi·ªçng tr·ª±c ti·∫øp t·ª´ file karaoke ƒë·∫ßy ƒë·ªß
        vocals_file = audio_processor.separate_vocals(karaoke_file)
        
        if vocals_file:
            # T·∫°o instrumental file (gi·∫£ ƒë·ªãnh)
            instrumental_file = vocals_file.replace("vocals.wav", "instrumental.wav")
            
            separation_result = {
                "success": True,
                "vocals_file": vocals_file,
                "instrumental_file": instrumental_file
            }
        else:
            separation_result = {"success": False, "error": "Failed to separate vocals"}
        
        if separation_result["success"]:
            logger.info("‚úÖ T√°ch gi·ªçng th√†nh c√¥ng!")
            logger.info(f"   Vocals file: {separation_result['vocals_file']}")
            logger.info(f"   Instrumental file: {separation_result['instrumental_file']}")
            # C√≥ th·ªÉ log th·ªùi l∆∞·ª£ng n·∫øu c·∫ßn (kh√¥ng b·∫Øt bu·ªôc)
            try:
                v_audio, v_sr = librosa.load(separation_result['vocals_file'], sr=None, mono=True)
                v_duration = len(v_audio) / float(v_sr)
                logger.info(f"   Vocals duration: {v_duration:.2f}s")
            except Exception:
                pass
            
            vocals_file = separation_result['vocals_file']
            instrumental_file = separation_result['instrumental_file']
        else:
            logger.error(f"‚ùå T√°ch gi·ªçng th·∫•t b·∫°i: {separation_result['error']}")
            return False
        
        # B∆∞·ªõc 2 & 3: Ph√°t hi·ªán key SONG SONG v·ªõi GPU acceleration cho vocals v√† instrumental
        logger.info("\nüéº B∆∞·ªõc 2 & 3: Ph√°t hi·ªán key song song v·ªõi GPU acceleration...")
        
        key_detector = AdvancedKeyDetector()
        
        # Log GPU status
        if key_detector.use_gpu:
            logger.info(f"üöÄ GPU acceleration ENABLED on device: {key_detector.device}")
        else:
            logger.info("üíª GPU acceleration DISABLED, using CPU")
        
        def detect_vocals_key():
            """Detect key cho vocals"""
            try:
                logger.info("üé§ ƒêang ph√°t hi·ªán key cho vocals...")
                result = key_detector.detect_key(vocals_file, audio_type="vocals")
                if result and "key" in result:
                    logger.info("‚úÖ Ph√°t hi·ªán key cho vocals th√†nh c√¥ng!")
                    logger.info(f"   Detected key: {result['key']}")
                    logger.info(f"   Confidence: {result['confidence']:.3f}")
                    logger.info(f"   Method: {result['method']}")
                    return result
                else:
                    logger.error("‚ùå Ph√°t hi·ªán key cho vocals th·∫•t b·∫°i")
                    return None
            except Exception as e:
                logger.error(f"‚ùå L·ªói ph√°t hi·ªán key vocals: {e}")
                return None
        
        def detect_instrumental_key():
            """Detect key cho instrumental"""
            try:
                logger.info("üéµ ƒêang ph√°t hi·ªán key cho instrumental...")
                result = key_detector.detect_key(instrumental_file, audio_type="instrumental")
                if result and "key" in result:
                    logger.info("‚úÖ Ph√°t hi·ªán key cho instrumental th√†nh c√¥ng!")
                    logger.info(f"   Detected key: {result['key']}")
                    logger.info(f"   Confidence: {result['confidence']:.3f}")
                    logger.info(f"   Method: {result['method']}")
                    return result
                else:
                    logger.error("‚ùå Ph√°t hi·ªán key cho instrumental th·∫•t b·∫°i")
                    return None
            except Exception as e:
                logger.error(f"‚ùå L·ªói ph√°t hi·ªán key instrumental: {e}")
                return None
        
        # Ch·∫°y song song v·ªõi ThreadPoolExecutor
        logger.info("‚ö° Ch·∫°y ph√°t hi·ªán key song song...")
        with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
            # Submit c·∫£ hai tasks
            vocals_future = executor.submit(detect_vocals_key)
            instrumental_future = executor.submit(detect_instrumental_key)
            
            # Ch·ªù k·∫øt qu·∫£ t·ª´ c·∫£ hai
            vocals_key_result = vocals_future.result()
            instrumental_key_result = instrumental_future.result()
        
        logger.info("üéâ Ho√†n th√†nh ph√°t hi·ªán key song song!")
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        if not vocals_key_result:
            logger.error("‚ùå Ph√°t hi·ªán key cho vocals th·∫•t b·∫°i")
            return False
        if not instrumental_key_result:
            logger.error("‚ùå Ph√°t hi·ªán key cho instrumental th·∫•t b·∫°i")
            return False
        
        # B∆∞·ªõc 4: So s√°nh keys v√† t√≠nh ƒëi·ªÉm
        logger.info("\nüìä B∆∞·ªõc 4: So s√°nh keys v√† t√≠nh ƒëi·ªÉm...")
        
        scoring_system = KaraokeScoringSystem()
        
        # So s√°nh keys (ƒë∆°n gi·∫£n)
        vocals_key = vocals_key_result['key']
        instrumental_key = instrumental_key_result['key']
        
        # T√≠nh key similarity ƒë∆°n gi·∫£n
        if vocals_key == instrumental_key:
            key_similarity = 1.0
            key_match = True
            key_score = 100.0
        else:
            # T√≠nh similarity d·ª±a tr√™n circle of fifths
            key_similarity = 0.5  # Gi·∫£ ƒë·ªãnh
            key_match = False
            key_score = 50.0
        
        key_comparison = {
            "match": key_match,
            "similarity": key_similarity,
            "score": key_score,
            "vocals_key": vocals_key,
            "instrumental_key": instrumental_key
        }
        
        logger.info("‚úÖ So s√°nh keys th√†nh c√¥ng!")
        logger.info(f"   Vocals key: {vocals_key_result['key']}")
        logger.info(f"   Instrumental key: {instrumental_key_result['key']}")
        logger.info(f"   Key match: {key_comparison['match']}")
        logger.info(f"   Key similarity: {key_comparison['similarity']:.3f}")
        logger.info(f"   Key score: {key_comparison['score']:.2f}")
        
        # B∆∞·ªõc 5: T√≠nh ƒëi·ªÉm t·ªïng th·ªÉ
        logger.info("\nüèÜ B∆∞·ªõc 5: T√≠nh ƒëi·ªÉm t·ªïng th·ªÉ...")
        
        # T√≠nh overall score ƒë∆°n gi·∫£n
        overall_score_value = key_comparison['score']
        
        if overall_score_value >= 90:
            grade = "A"
            feedback = "Excellent key matching!"
        elif overall_score_value >= 80:
            grade = "B"
            feedback = "Good key matching!"
        elif overall_score_value >= 70:
            grade = "C"
            feedback = "Fair key matching!"
        else:
            grade = "D"
            feedback = "Poor key matching!"
        
        overall_score = {
            "overall_score": overall_score_value,
            "grade": grade,
            "feedback": feedback
        }
        
        logger.info("‚úÖ T√≠nh ƒëi·ªÉm t·ªïng th·ªÉ th√†nh c√¥ng!")
        logger.info(f"   Overall score: {overall_score['overall_score']:.2f}")
        logger.info(f"   Grade: {overall_score['grade']}")
        logger.info(f"   Feedback: {overall_score['feedback']}")
        
        # K·∫øt qu·∫£ t·ªïng h·ª£p
        result = {
            "success": True,
            "karaoke_file": karaoke_file,
            "beat_file": beat_file,
            "separation_result": separation_result,
            "vocals_key_result": vocals_key_result,
            "instrumental_key_result": instrumental_key_result,
            "key_comparison": key_comparison,
            "overall_score": overall_score
        }
        
        logger.info("\nüéâ X·ª≠ l√Ω full audio ho√†n t·∫•t!")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong x·ª≠ l√Ω: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=== PROCESS FULL AUDIO ===")
    
    # V√≠ d·ª• ch·∫°y nhanh: c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ·ª©ng
    karaoke = "C:\\path\\to\\karaoke.wav"
    beat = "C:\\path\\to\\beat.wav"
    print("\n1. Processing Full Audio Files...")
    result = process_full_audio(karaoke, beat)
    
    # K·∫øt qu·∫£
    print("\n=== KET QUA ===")
    if result:
        print("PROCESSING FULL AUDIO HOAN TAT!")
        print("He thong da xu ly thanh cong 2 file dau vao!")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
        if isinstance(result, dict):
            print(f"\nKet qua chi tiet:")
            print(f"   Vocals key: {result['vocals_key_result']['key']}")
            print(f"   Instrumental key: {result['instrumental_key_result']['key']}")
            print(f"   Key similarity: {result['key_comparison']['similarity']:.3f}")
            print(f"   Overall score: {result['overall_score']['overall_score']:.2f}")
            print(f"   Grade: {result['overall_score']['grade']}")
    else:
        print("CAN CAI THIEN THEM!")
        print("Van con van de voi xu ly audio!")
